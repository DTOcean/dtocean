name: dtocean-core actions
on:
  push:
    branches: [ next ]
    paths:
      - '.codecov.yml'
      - '.github/actions/poetry-install/action.yml'
      - '.github/workflows/dtocean-core.yml'
      - 'packages/dtocean-core/**'
      - 'packages/dtocean-hydrodynamics/**'
      - 'packages/mdo-engine/**'
      - 'packages/polite-config/**'
  pull_request:
    branches: [ next ]
    paths:
      - '.codecov.yml'
      - '.github/workflows/dtocean-core.yml'
      - 'packages/dtocean-core/**'
      - 'packages/dtocean-hydrodynamics/**'
      - 'packages/mdo-engine/**'
      - 'packages/polite-config/**'
jobs:
  pytest-linux:
    name: Unit tests (ubuntu-latest)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/dtocean-core
    env:
      DATABASE_URL: https://github.com/DTOcean/dtocean-database-next/releases/download/v2025.04.0/dtocean-database-v2025.04.0.tar.gz
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          persist-credentials: false
      - name: Install system dependencies (GUI)
        run: sudo apt update && sudo apt install -y libegl1-mesa-dev
      - name: Set database root password
        run: |
          echo "POSTGRES_PASSWORD=$(uuidgen)" >> $GITHUB_ENV
      - name: Cache database folder
        uses: actions/cache@v4
        id: cache
        with:
          path: database
          key: ${{ env.DATABASE_URL }}
      - name: Download and extract database folder
        run: |
          mkdir database
          wget -O dtocean-database.tar.gz ${DATABASE_URL}
          tar xzf dtocean-database.tar.gz -C database
        working-directory: ${{ github.workspace }}
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Start database container
        run: |
          docker run \
          --name dtocean-database \
          --mount type=bind,src=${GITHUB_WORKSPACE}/database/export,dst=/home/postgres/export \
          -e POSTGRES_PASSWORD \
          -p 5432:5432 \
          -d \
          postgis/postgis
      - name: Install dtocean-core
        uses: ./.github/actions/poetry-install
        with: 
          root-directory: ${{ github.workspace }}/packages/dtocean-core
          groups: '["test", "test-extras"]'
      - name: Run tests
        run: |
          poetry run pytest --cov=src --cov-report=xml --postgresql-password="${POSTGRES_PASSWORD}" --postgresql-path=${GITHUB_WORKSPACE}/database tests
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: dtocean-core
      - name: Stop database container
        run: docker stop dtocean-database
  pytest-windows:
    name: Unit tests (windows-latest)
    runs-on: windows-latest
    defaults:
      run:
        working-directory: packages/dtocean-core
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          persist-credentials: false
      - name: Install dtocean-core
        uses: ./.github/actions/poetry-install
        with: 
          root-directory: ${{ github.workspace }}/packages/dtocean-core
          groups: '["test", "test-extras"]'
      - name: Run tests
        run: |
          poetry run pytest --cov=src --cov-report=xml tests
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: dtocean-core
  audit:
    name: Code audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/dtocean-core
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          persist-credentials: false
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Install package
        run: |
          poetry install --with audit --with test-extras
      - name: Run ruff
        run: |
          poetry run ruff check --output-format github
      - name: Run pyright
        run: |
          poetry run pyright src
