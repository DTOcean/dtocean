[tool.poetry]
name = "dtocean-hydrodynamics"
version = "3.2.0"
description = "Hydrodynamics module for the DTOcean tools"
authors = ["Mathew Topper <damm_horse@yahoo.co.uk>"]
license = "GPL-3.0-or-later"
readme = "README.md"
packages = [
  {include = "dtocean_hydro", from="src"},
  {include = "dtocean_tidal", from="src"},
  {include = "dtocean_wave", from="src"},
  {include = "dtocean_wec", from="src"},
  ]
include = [
    { path = "meson.build", format = "sdist" },
    { path = "src/dtocean_wec/designer/*.ui", format = "sdist" },
    { path = "src/dtocean_tidal/submodel/ParametricWake/*.so", format = "wheel" },
    { path = "src/dtocean_tidal/submodel/ParametricWake/*.pyd", format = "wheel"},
    { path = "src/dtocean_tidal/submodel/ParametricWake/*.dll", format = "wheel"},
    { path = "src/dtocean_tidal/submodel/ParametricWake/*.dll.a", format = "wheel"},
]

[tool.poetry.dependencies]
python = "^3.12"
cma = "^4.0.0"
h5py = "^3.12.1"
matplotlib = "^3.8.0"
numpy = "^1.26.4"
pandas = "^2.2.3"
pyopengl = "^3.1.7"
scikit-learn = "^1.6.0"
scipy = "^1.14.1"
shapely = "^2.0.6"
polite-config = {path = "../polite-config", develop = true}
contourpy = "^1.3.1"
pyside6 = "^6.8.1.1"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
mock = "^5.1.0"
pytest = "^8.3.4"
pytest-mock = "^3.14.0"
pytest-qt = "^4.4.0"
pytest-cov = "^6.0.0"

[tool.poetry.group.audit]
optional = true

[tool.poetry.group.audit.dependencies]
ruff = "^0.8.3"
pyright = "^1.1.390"
deptry = "^0.21.1"

[tool.poetry.scripts]
dtocean-hydro = 'dtocean_hydro._cli:run'
dtocean-wec = 'dtocean_wec:gui_interface'

[tool.poetry.build]
script = "scripts/build-extension.py"

[tool.poetry-monoranger-plugin]
enabled = true
monorepo-root = "../../"
version-rewrite-rule = '=='

[tool.pyright]
typeCheckingMode = "basic"
exclude = ["src/dtocean_wec/generated/**"]

[tool.ruff]
line-length = 80

[build-system]
requires = ["poetry-core", "meson", "ninja", "numpy~=1.26.4", "pyside6"]
build-backend = "poetry.core.masonry.api"
